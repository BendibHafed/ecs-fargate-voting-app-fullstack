name: CD - controlled Deployment

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      approve_deployment:
        description: "Approve and continue deployment?"
        required: true
        default: "yes"
env:
  ACT: false
  github_repo: bendibhafed/ecs-fargate-voting-app-fullstack
  image_tag: ${{ github.sha }}

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug ACT Mode
        run: |
          if [ "$ACT" = "true" ]; then
            echo " ACT mode detected â€” running locally"
          else
            echo " GitHub Actions mode â€” deploying remotely"
          fi

      - name: Install Docker Compose (ACT only)
        if: ${{ env.ACT == 'true' }}
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Run with Docker Compose
        working-directory: .
        if: ${{ env.ACT == 'true' }}
        run: |
          docker compose -f docker-compose.yaml up --build -d
          echo "Waiting for the App to be ready..."
          for i in {1..20}; do
            if curl -fs http://localhost:5000/healthz; then
              echo "App is healthy!"
              break
            fi
            sleep 3
          done

      - name: Install AWS CLI (ACT only)
        if: ${{ env.ACT == 'true' }}
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          aws --version

      - name: Start LocalStack (ACT only)
        if: ${{ env.ACT == 'true' }}
        env:
          AWS_ACCESS_KEY_ID: test
          AWS_SECRET_ACCESS_KEY: test
          AWS_DEFAULT_REGION: us-east-1
        run: |
          if docker ps -a --format '{{.Names}}' | grep -q '^localstack$'; then
            echo "Removing existing LocalStack container..."
            docker rm -f localstack || true
          fi

          echo "Starting LocalStack..."
          docker run -d --name localstack -p 4566:4566 -p 4571:4571 localstack/localstack
          sleep 10

          echo "Creating S3 bucket in LocalStack..."
          aws --endpoint-url=http://localhost:4566 s3 mb s3://my-local-bucket

      - name: Log in to GitHub Container Registry
        if: ${{ github.event_name == 'workflow_dispatch' && env.ACT != 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        if: ${{ env.ACT != 'true' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Test AWS credentials
        if: ${{ env.ACT != 'true' }}
        run: aws sts get-caller-identity

      - name: Ensure Terraform Backend Exists
        if: ${{ env.ACT != 'true' }}
        run: |
          set -e
          BUCKET="ecs-fargate-voting-app-state-bucket"
          REGION=${{ secrets.AWS_REGION }}
          DYNAMO_TABLE="ecs-fargate-voting-locks"
          echo "Checking S3 bucket: $BUCKET"
          if ! aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null; then
          echo "Creating S3 Bucket!"
            aws s3api create-bucket \
              --bucket "$BUCKET" \
              --region "$REGION" \
              --create-bucket-configuration LocationConstraint="$REGION"
            aws s3api put-bucket-encryption \
              --bucket "$BUCKET" \
              --server-side-encryption-configuration '{"Rules":[{"ApplyServerSideEncryptionByDefault":{"SSEAlgorithm":"AES256"}}]}' || true
          fi
          echo "Checking DynamoDB table: $DYNAMO_TABLE"
          if ! aws dynamodb describe-table --table-name "$DYNAMO_TABLE" >/dev/null 2>&1; then
            echo "Creating DynamoDB lock table..."
            aws dynamodb create-table \
              --table-name "$DYNAMO_TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST \
              --region "$REGION"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.13.0"

      - name: Terraform Init (Local State)
        if: ${{ env.ACT == 'true' }}
        working-directory: infra/terraform
        run: |
          rm -rf .terraform .terraform.lock.hcl backend_override.tf
          cat > backend_override.tf <<EOF
          terraform {
            backend "local" {
              path = "terraform.tfstate"
            }
          }
          EOF
          terraform init -reconfigure -input=false -no-color

      - name: Terraform Init (AWS)
        if: ${{ env.ACT != 'true' }}
        working-directory: infra/terraform
        run: terraform init -reconfigure -input=false

      - name: Terraform plan
        if: ${{ env.ACT != 'true' }}
        working-directory: infra/terraform
        run: |
          terraform plan -input=false -no-color -out=tfplan \
            -var="database_url=${{ secrets.DATABASE_URL }}" \
            -var="db_name=${{ secrets.DB_NAME }}" \
            -var="db_username=${{ secrets.DB_USERNAME }}" \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="flask_secret_key=${{ secrets.FLASK_SECRET_KEY }}"

      - name: Apply Terraform Changes
        working-directory: infra/terraform
        if: ${{ github.event_name == 'workflow_dispatch' && env.ACT != 'true' }}
        run: |
          terraform apply -input=false -auto-approve -no-color \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            tfplan
